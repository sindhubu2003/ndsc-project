# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EvRn2JXCyqnS2iD_d-VXY_kcyK7NkZcg
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense

# Step 1: Load and Preprocess Data
# Simulating customer data
np.random.seed(42)
data = pd.DataFrame({
    'Age': np.random.randint(18, 70, 500),
    'Annual_Income': np.random.randint(20000, 120000, 500),
    'Spending_Score': np.random.randint(1, 100, 500),
    'Purchase_Frequency': np.random.randint(1, 50, 500)
})

scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)

# Step 2: Build Autoencoder for Dimensionality Reduction
input_dim = data_scaled.shape[1]
encoding_dim = 2  # Low-dimensional representation

input_layer = Input(shape=(input_dim,))
encoded = Dense(8, activation='relu')(input_layer)
encoded = Dense(4, activation='relu')(encoded)
encoded = Dense(encoding_dim, activation='relu')(encoded)

decoded = Dense(4, activation='relu')(encoded)
decoded = Dense(8, activation='relu')(decoded)
decoded = Dense(input_dim, activation='linear')(decoded)

autoencoder = Model(input_layer, decoded)
encoder = Model(input_layer, encoded)

autoencoder.compile(optimizer='adam', loss='mse')
autoencoder.fit(data_scaled, data_scaled, epochs=50, batch_size=16, verbose=1)

# Step 3: Perform K-Means Clustering on Encoded Data
encoded_data = encoder.predict(data_scaled)
kmeans = KMeans(n_clusters=4, random_state=42)
clusters = kmeans.fit_predict(encoded_data)

# Step 4: Assign Clusters and Visualize Results
data['Cluster'] = clusters
plt.figure(figsize=(8, 6))
sns.scatterplot(x=encoded_data[:, 0], y=encoded_data[:, 1], hue=clusters, palette='viridis')
plt.title("Deep Clustering with Autoencoders")
plt.xlabel("Encoded Feature 1")
plt.ylabel("Encoded Feature 2")
plt.show()

# Step 5: Display Cluster Insights
print(data.groupby('Cluster').mean())

"""# New Section"""